enum Source {
    PandoraPapers
    ParadisePapers
    OffshoreLeaks
    BahamasLeak
}

"""
Record is the base type for all records in the graph.
"""
interface Record {
    id: ID!

    "The offshore links 'node_id'"
    nodeID: Int! @id
    "The ICIJ internal ID"
    internalID: Int! @search
    "The record source"
    sourceID: String! @search(by: [exact])
    "Notes about the record"
    notes: String @search(by: [fulltext])

    "The associated name"
    name: String! @search(by: [exact, term, fulltext, regexp])

    "Associated country codes"
    countryCodes: [String!]

    "Year (inclusive) in which the record is considered valid"
    validUntil: DateTime

    "Records related to this record"
    related: [Record!]
}

"""
Entity represents companies, trusts and foundations.
"""
type Entity implements Record {

    "The original name of the entity"
    originalName: String @search(by: [exact, term, fulltext, regexp])
    "The former name of the entity"
    formerName: String! @search(by: [exact, term, fulltext, regexp])

    "The jurisdiction of the entity"
    jurisdiction: String @search(by: [exact])

    "The company type, free-form text"
    companyType: String @search(by: [exact, term])

    "The full text address"
    address: String @search(by: [exact, term, fulltext, regexp])

    "The incorporation date"
    incorporationDate: DateTime @search
    "The inactivation date"
    inactivationDate: DateTime @search
    "The struck off date"
    struckOffDate: DateTime @search
    "The dormancy(?) date"
    dormDate: DateTime @search

    "The status of the entity (arbitrary)"
    status: String @search(by: [exact, term])

    "The service provider for the entity"
    serviceProvider: String @search(by: [fulltext])

    "Addresses associated with the entity"
    addresses: [Address!] @hasInverse(field: entities)
}

enum OtherType {
    LLC
    SoleOwnership
    ForeignFormed
}

"""
Other represents other companies, trusts and foundations.
"""
type Other implements Record {
     "The former name of the entity"
    formerName: String! @search(by: [exact, term, fulltext, regexp])

    "The organization type of the Other record"
    type: OtherType

     "The incorporation date"
    incorporationDate: DateTime @search
    "The struck off date"
    struckOffDate: DateTime @search
    "The closed date"
    closedDate: DateTime @search

    "The jurisdiction of the entity"
    jurisdiction: String @search(by: [exact])

    "Addresses associated with the other"
    addresses: [Address!] @hasInverse(field: others)
}

enum IntermediaryStatus {
    Active
    Inactive
    Prospect
    Suspended
    Delinquent
    ActiveLegal
    SuspendedLegal
    UnrecoverableAccounts
    ClientInRepresentativeTerritory
}

"""
Intermediary represents people or entities that intermediate.
"""
type Intermediary implements Record {

    "The intermediary status"
    status: IntermediaryStatus @search(by: [exact])

    "The intermediary address, TODO: verify intermediaries have relationships to addresses"
    address: String @search(by: [exact, term, fulltext, regexp])

    "Addresses associated with the intermediary"
    addresses: [Address!] @hasInverse(field: intermediaries)
}

"""
Officer represents people that are officers of entities or others.
"""
type Officer implements Record {

   "Addresses associated with the officer"
   addresses: [Address!] @hasInverse(field: officers)
}

"""
Address represents physical addresses.
"""
type Address implements Record {
    "The full text address"
    address: String @search(by: [exact, term, fulltext, regexp])

    "Officers associated with the address"
    officers: [Officer!] @hasInverse(field: addresses)
    "Entities associated with the address"
    entities: [Entity!] @hasInverse(field: addresses)
    "Others associated with the address"
    others: [Other!] @hasInverse(field: addresses)
    "Intermediaries associated with the address"
    intermediaries: [Intermediary!] @hasInverse(field: addresses)

    "The geolocation of the address"
    location: Point @search
}